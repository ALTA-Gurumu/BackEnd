// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	siswa "Gurumu/features/siswa"
)

// SiswaService is an autogenerated mock type for the SiswaService type
type SiswaService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: token
func (_m *SiswaService) Delete(token interface{}) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Profile provides a mock function with given fields: token
func (_m *SiswaService) Profile(token interface{}) (siswa.Core, error) {
	ret := _m.Called(token)

	var r0 siswa.Core
	if rf, ok := ret.Get(0).(func(interface{}) siswa.Core); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(siswa.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newStudent
func (_m *SiswaService) Register(newStudent siswa.Core) (siswa.Core, error) {
	ret := _m.Called(newStudent)

	var r0 siswa.Core
	if rf, ok := ret.Get(0).(func(siswa.Core) siswa.Core); ok {
		r0 = rf(newStudent)
	} else {
		r0 = ret.Get(0).(siswa.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(siswa.Core) error); ok {
		r1 = rf(newStudent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, updateData, avatar
func (_m *SiswaService) Update(token interface{}, updateData siswa.Core, avatar *multipart.FileHeader) error {
	ret := _m.Called(token, updateData, avatar)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, siswa.Core, *multipart.FileHeader) error); ok {
		r0 = rf(token, updateData, avatar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSiswaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiswaService creates a new instance of SiswaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiswaService(t mockConstructorTestingTNewSiswaService) *SiswaService {
	mock := &SiswaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
