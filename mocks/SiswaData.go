// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	siswa "Gurumu/features/siswa"

	mock "github.com/stretchr/testify/mock"
)

// SiswaData is an autogenerated mock type for the SiswaData type
type SiswaData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *SiswaData) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Profile provides a mock function with given fields: id
func (_m *SiswaData) Profile(id uint) (siswa.Core, error) {
	ret := _m.Called(id)

	var r0 siswa.Core
	if rf, ok := ret.Get(0).(func(uint) siswa.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(siswa.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newStudent
func (_m *SiswaData) Register(newStudent siswa.Core) (siswa.Core, error) {
	ret := _m.Called(newStudent)

	var r0 siswa.Core
	if rf, ok := ret.Get(0).(func(siswa.Core) siswa.Core); ok {
		r0 = rf(newStudent)
	} else {
		r0 = ret.Get(0).(siswa.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(siswa.Core) error); ok {
		r1 = rf(newStudent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, updateData
func (_m *SiswaData) Update(id uint, updateData siswa.Core) error {
	ret := _m.Called(id, updateData)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, siswa.Core) error); ok {
		r0 = rf(id, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSiswaData interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiswaData creates a new instance of SiswaData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiswaData(t mockConstructorTestingTNewSiswaData) *SiswaData {
	mock := &SiswaData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
