// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	guru "Gurumu/features/guru"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// GuruService is an autogenerated mock type for the GuruService type
type GuruService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: token
func (_m *GuruService) Delete(token interface{}) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Profile provides a mock function with given fields: token
func (_m *GuruService) Profile(token interface{}) (guru.Core, error) {
	ret := _m.Called(token)

	var r0 guru.Core
	if rf, ok := ret.Get(0).(func(interface{}) guru.Core); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(guru.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newGuru
func (_m *GuruService) Register(newGuru guru.Core) (guru.Core, error) {
	ret := _m.Called(newGuru)

	var r0 guru.Core
	if rf, ok := ret.Get(0).(func(guru.Core) guru.Core); ok {
		r0 = rf(newGuru)
	} else {
		r0 = ret.Get(0).(guru.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(guru.Core) error); ok {
		r1 = rf(newGuru)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, updateData, avatar
func (_m *GuruService) Update(token interface{}, updateData guru.Core, avatar *multipart.FileHeader) (guru.Core, error) {
	ret := _m.Called(token, updateData, avatar)

	var r0 guru.Core
	if rf, ok := ret.Get(0).(func(interface{}, guru.Core, *multipart.FileHeader) guru.Core); ok {
		r0 = rf(token, updateData, avatar)
	} else {
		r0 = ret.Get(0).(guru.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, guru.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, updateData, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGuruService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGuruService creates a new instance of GuruService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGuruService(t mockConstructorTestingTNewGuruService) *GuruService {
	mock := &GuruService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
