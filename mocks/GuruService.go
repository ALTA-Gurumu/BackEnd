// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	guru "Gurumu/features/guru"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// GuruService is an autogenerated mock type for the GuruService type
type GuruService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: token
func (_m *GuruService) Delete(token interface{}) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Profile provides a mock function with given fields: id
func (_m *GuruService) Profile(id uint) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileBeranda provides a mock function with given fields: loc, subj, page
func (_m *GuruService) ProfileBeranda(loc string, subj string, page int) (map[string]interface{}, []guru.Core, error) {
	ret := _m.Called(loc, subj, page)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, int) map[string]interface{}); ok {
		r0 = rf(loc, subj, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 []guru.Core
	if rf, ok := ret.Get(1).(func(string, string, int) []guru.Core); ok {
		r1 = rf(loc, subj, page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]guru.Core)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(loc, subj, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: newGuru
func (_m *GuruService) Register(newGuru guru.Core) (guru.Core, error) {
	ret := _m.Called(newGuru)

	var r0 guru.Core
	if rf, ok := ret.Get(0).(func(guru.Core) guru.Core); ok {
		r0 = rf(newGuru)
	} else {
		r0 = ret.Get(0).(guru.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(guru.Core) error); ok {
		r1 = rf(newGuru)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, updateData, avatar, ijazah
func (_m *GuruService) Update(token interface{}, updateData guru.Core, avatar *multipart.FileHeader, ijazah *multipart.FileHeader) error {
	ret := _m.Called(token, updateData, avatar, ijazah)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, guru.Core, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r0 = rf(token, updateData, avatar, ijazah)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGuruService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGuruService creates a new instance of GuruService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGuruService(t mockConstructorTestingTNewGuruService) *GuruService {
	mock := &GuruService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
