// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	ulasan "Gurumu/features/ulasan"

	mock "github.com/stretchr/testify/mock"
)

// UlasanService is an autogenerated mock type for the UlasanService type
type UlasanService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, guruId, newUlasan
func (_m *UlasanService) Add(token interface{}, guruId uint, newUlasan ulasan.Core) error {
	ret := _m.Called(token, guruId, newUlasan)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint, ulasan.Core) error); ok {
		r0 = rf(token, guruId, newUlasan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UlasanService) GetAll() ([]ulasan.Core, error) {
	ret := _m.Called()

	var r0 []ulasan.Core
	if rf, ok := ret.Get(0).(func() []ulasan.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ulasan.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: guruId
func (_m *UlasanService) GetById(guruId uint) ([]ulasan.Core, error) {
	ret := _m.Called(guruId)

	var r0 []ulasan.Core
	if rf, ok := ret.Get(0).(func(uint) []ulasan.Core); ok {
		r0 = rf(guruId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ulasan.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(guruId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUlasanService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUlasanService creates a new instance of UlasanService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUlasanService(t mockConstructorTestingTNewUlasanService) *UlasanService {
	mock := &UlasanService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
