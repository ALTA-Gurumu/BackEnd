// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ulasan "Gurumu/features/ulasan"

	mock "github.com/stretchr/testify/mock"
)

// UlasanData is an autogenerated mock type for the UlasanData type
type UlasanData struct {
	mock.Mock
}

// Add provides a mock function with given fields: siswaId, guruId, newUlasan
func (_m *UlasanData) Add(siswaId uint, guruId uint, newUlasan ulasan.Core) error {
	ret := _m.Called(siswaId, guruId, newUlasan)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, ulasan.Core) error); ok {
		r0 = rf(siswaId, guruId, newUlasan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UlasanData) GetAll() ([]ulasan.Core, error) {
	ret := _m.Called()

	var r0 []ulasan.Core
	if rf, ok := ret.Get(0).(func() []ulasan.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ulasan.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: guruId
func (_m *UlasanData) GetById(guruId uint) ([]ulasan.Core, error) {
	ret := _m.Called(guruId)

	var r0 []ulasan.Core
	if rf, ok := ret.Get(0).(func(uint) []ulasan.Core); ok {
		r0 = rf(guruId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ulasan.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(guruId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUlasanData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUlasanData creates a new instance of UlasanData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUlasanData(t mockConstructorTestingTNewUlasanData) *UlasanData {
	mock := &UlasanData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
